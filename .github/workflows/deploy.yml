name: Deploy AWS Portfolio

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: ✅ Make shell scripts executable
        run: chmod +x infra/*.sh

      # 🔸 S3 Bucket (create & upload frontend)
      - name: ☁️ Create and configure S3 bucket + upload frontend
        run: ./infra/create-s3.sh

      # 🔸 DynamoDB (create if not exists)
      - name: 🗃️ Create DynamoDB table
        run: |
          if ! aws dynamodb describe-table --table-name ContactMessages 2>/dev/null; then
            ./infra/create-dynamodb.sh
          else
            echo "✅ DynamoDB table already exists. Skipping creation."
          fi

      # 🔸 IAM Role (create if not exists)
      - name: 🛡️ Create IAM role for Lambda
        run: |
          if ! aws iam get-role --role-name lambda-dynamodb-role 2>/dev/null; then
            ./infra/create-iam.sh
          else
            echo "✅ IAM role already exists. Skipping creation."
          fi

      # 🔸 Lambda Function (always update code)
      - name: 🧠 Deploy Lambda function
        run: |
          if ! aws lambda get-function --function-name myLambdaFunction 2>/dev/null; then
            ./infra/create-lambda.sh
          else
            echo "🔄 Updating existing Lambda function code..."
              zip -j lambda.zip backend/lambda_function.py
              aws lambda update-function-code \
              --function-name myLambdaFunction \
              --zip-file fileb://lambda.zip
               fi


      # 🔸 API Gateway
      - name: 🌐 Setup API Gateway
        run: ./infra/create-apigateway.sh

      # 🔁 Inject API Gateway URL into frontend/config.js
      - name: 🧩 Inject API Gateway URL into config.js
        run: |
          API_ID=$(aws apigateway get-rest-apis \
            --query "items[?name=='ContactAPI'].id" \
            --output text)

          API_URL="https://$API_ID.execute-api.ap-south-1.amazonaws.com/prod/contact"
          echo "✅ Injecting API URL: $API_URL"
          sed -i "s|__API_URL__|$API_URL|g" frontend/config.js

      # 🔁 Upload frontend again after config.js change
      - name: 🚀 Re-upload frontend with injected config
        run: aws s3 sync frontend/ s3://siddhant-portfolio-2025/ --delete

      # ✅ Optional: Test the /contact API
      - name: 🧪 Test /contact API endpoint
        run: |
          API_ID=$(aws apigateway get-rest-apis \
            --query "items[?name=='ContactAPI'].id" \
            --output text)
          URL="https://$API_ID.execute-api.ap-south-1.amazonaws.com/prod/contact"
          echo "🚀 Testing endpoint: $URL"
          curl -i -X POST "$URL" -H "Content-Type: application/json" \
            -d '{"name":"Test","email":"test@example.com","message":"Hello from GitHub Actions!"}'
