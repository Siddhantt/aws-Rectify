name: Deploy AWS Portfolio

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Make shell scripts executable
        run: chmod +x infra/*.sh

      # ‚úÖ S3 Bucket (idempotent)
      - name: Create and configure S3 bucket + upload frontend
        run: ./infra/create-s3.sh

      # ‚úÖ DynamoDB Table (idempotent)
      - name: Create DynamoDB table
        run: |
          if ! aws dynamodb describe-table --table-name ContactMessages 2>/dev/null; then
            ./infra/create-dynamodb.sh
          else
            echo "‚úÖ DynamoDB table already exists. Skipping creation."
          fi

      # ‚úÖ IAM Role for Lambda (idempotent)
      - name: Create IAM role for Lambda
        run: |
          if ! aws iam get-role --role-name lambda-dynamodb-role 2>/dev/null; then
            ./infra/create-iam.sh
          else
            echo "‚úÖ IAM role already exists. Skipping creation."
          fi

      # ‚úÖ Lambda Function (idempotent)
      - name: Deploy Lambda function
        run: |
          FUNCTION_NAME="myLambdaFunction"
          ROLE_ARN="arn:aws:iam::326641642949:role/lambda-dynamodb-role"
          ZIP_FILE="lambda_function.zip"

          echo "üì¶ Zipping Lambda code dynamically..."
          LAMBDA_PATH=$(find . -type f -name lambda_function.py | head -n 1)
          if [ -z "$LAMBDA_PATH" ]; then
            echo "‚ùå lambda_function.py not found!"
            exit 1
          fi
          zip -j $ZIP_FILE "$LAMBDA_PATH"

          echo "üìÇ Zip contents:"
          unzip -l $ZIP_FILE

          if aws lambda get-function --function-name "$FUNCTION_NAME" > /dev/null 2>&1; then
            echo "üîÅ Lambda exists. Updating..."
            aws lambda update-function-code \
              --function-name "$FUNCTION_NAME" \
              --zip-file fileb://$ZIP_FILE
          else
            echo "üöÄ Creating new Lambda function..."
            aws lambda create-function \
              --function-name "$FUNCTION_NAME" \
              --zip-file fileb://$ZIP_FILE \
              --handler lambda_function.lambda_handler \
              --runtime python3.8 \
              --role "$ROLE_ARN"
          fi

          rm -f $ZIP_FILE
          echo "‚úÖ Lambda deployed."

      # ‚úÖ API Gateway (idempotent by name)
      - name: Setup API Gateway
        run: ./infra/create-apigateway.sh

      # ‚úÖ Test the /contact endpoint
      - name: Test /contact API
        run: |
          API_ID=$(aws apigateway get-rest-apis \
            --query "items[?name=='ContactAPI'].id" \
            --output text)

          URL="https://$API_ID.execute-api.ap-south-1.amazonaws.com/prod/contact"
          echo "üöÄ Testing deployed API endpoint: $URL"
          curl -i -X POST "$URL" -H "Content-Type: application/json" \
            -d '{"name":"Test","email":"test@example.com","message":"Hi"}'
